# Python Modules for Natural Language Processingimport nltk as nldef remove_noise(self):    print("---------------------------------")    print("Removing Noise words")    words = nl.word_tokenize(self)    noise_free_text = words    word = 0    noise_words = ["it", "would", "you", "is", "at", "the", "and", "be", "able", "to", "a", "for"]    while word < len(words):        print("Word being searched for: " + str(words[word]))        for noise in noise_words:            print(str(noise))            if words[word] == noise:                del noise_free_text[word]        word += 1    intents = find_intents(noise_free_text)    objects = find_objects(noise_free_text)    return intents, objectsdef find_intents(self):    print("Finding the intents in the request")    phrase = self    intent_present = []    word = 0    intents = ["add", "set", "search", "find", "where", "what", "how", "look"]    while word < len(phrase):        intent = 0        while intent < len(intents):            if phrase[word] == intents[intent]:                intent_present.append(intents[intent])                break            else:                intent += 1        word += 1    print("Finished finding intents")    return intent_presentdef find_objects(self):    print("Finding objects in the request")    phrase = self    objects_present = []    word = 0    objects = ["minutes", "minute", "seconds", "second", "london", "stirling"]    while word < len(phrase):        obj = 0        while obj < len(objects):            if phrase[word] == objects[obj]:                if objects[obj] == "minutes" or objects[obj] == "minute":                    objects_present.append(phrase[word-1])                    objects_present.append(phrase[word])                    break                elif objects[obj] == "seconds" or objects[obj] == "second":                    objects_present.append(phrase[word-1])                    objects_present.append(phrase[word])                    break                else:                    objects_present.append(phrase[word])                    break            else:                obj += 1        word += 1    print("Finished finding the Objects")    return objects_present